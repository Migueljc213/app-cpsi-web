import mysql from 'mysql2/promise'
import { dbSettings, cleanupIdleConnections } from './db-settings'

// Configura√ß√µes do banco de dados a partir das vari√°veis de ambiente
const dbConfig = {
  host: process.env.MYSQL_HOST || '127.0.0.1',
  user: process.env.MYSQL_USER || 'root',
  password: process.env.MYSQL_PASSWORD || '',
  port: parseInt(process.env.MYSQL_PORT || '3306'),
}

// Conex√£o para o banco prevsaude (√∫nico banco da aplica√ß√£o)
export const createConnection = async () => {
  return await mysql.createConnection({
    ...dbConfig,
    database: process.env.MYSQL_DATABASE || 'prevsaude',
  })
}

// Alias para compatibilidade com c√≥digo existente
export const createAccessConnection = createConnection
export const createGestorConnection = createConnection

// Pool de conex√µes OTIMIZADO com configura√ß√µes do ambiente
export const pool = mysql.createPool({
  ...dbConfig,
  database: process.env.MYSQL_DATABASE || 'prevsaude',
  ...dbSettings.pool,
})

// Alias para compatibilidade com c√≥digo existente
export const accessPool = pool
export const gestorPool = pool


// Limpeza autom√°tica de conex√µes ociosas a cada 30 segundos
setInterval(() => {
  // Cast para o tipo esperado pela fun√ß√£o cleanupIdleConnections
  cleanupIdleConnections(pool as unknown as { _freeConnections?: Array<{ release?: () => void }> });
}, 30000);

// Fun√ß√£o para testar conex√£o com o banco
export const testConnection = async () => {
  try {
    console.log('üîç Testando conex√£o com o banco de dados...')
    const connection = await createAccessConnection()
    await connection.ping()
    await connection.end()
    console.log('‚úÖ Conex√£o com banco de dados estabelecida com sucesso!')
    return true
  } catch (error) {
    console.error('‚ùå Erro ao conectar com o banco de dados:', error)
    return false
  }
}

// Fun√ß√£o para listar tabelas do banco
export const listTables = async () => {
  try {
    console.log('üîç Listando tabelas do banco de dados...')
    const [tables] = await pool.execute(
      "SELECT table_name FROM information_schema.tables WHERE table_schema = ?",
      [process.env.MYSQL_DATABASE || 'prevsaude']
    )
    
    const tableNames = (tables as {table_name: string}[]).map(t => t.table_name)
    console.log('üìã Tabelas encontradas:', tableNames)
    return tableNames
  } catch (error) {
    console.error('‚ùå Erro ao listar tabelas:', error)
    return []
  }
}

// Fun√ß√£o para fechar o pool quando necess√°rio
export const closePools = async () => {
  try {
    await pool.end()
    console.log('Pool de conex√£o fechado com sucesso')
  } catch (error) {
    console.error('Erro ao fechar pool:', error)
  }
}

// Fun√ß√£o para executar queries com retry autom√°tico OTIMIZADA
export const executeWithRetry = async <T>(
  pool: mysql.Pool,
  query: string,
  params: unknown[] = []
): Promise<T> => {
  let lastError: Error | undefined
  
  for (let attempt = 1; attempt <= dbSettings.retry.maxRetries; attempt++) {
    try {
      const [result] = await pool.execute(query, params)
      return result as T
    } catch (error) {
      lastError = error as Error
      
      // Se for erro de conex√£o, tentar novamente
      if ((error as { code?: string }).code === 'ER_CON_COUNT_ERROR' || (error as { code?: string }).code === 'ECONNRESET') {
        if (attempt < dbSettings.retry.maxRetries) {
          console.log(`Tentativa ${attempt} falhou, tentando novamente em ${dbSettings.retry.retryDelay}ms...`)
          await new Promise(resolve => setTimeout(resolve, dbSettings.retry.retryDelay))
          
          // Limpar conex√µes ociosas antes de tentar novamente
          cleanupIdleConnections(pool as unknown as { _freeConnections?: Array<{ release?: () => void }> });
          continue
        }
      }
      
      // Para outros erros, n√£o tentar novamente
      break
    }
  }
  
  if (lastError) {
    throw lastError
  }
  
  throw new Error('Erro desconhecido durante a execu√ß√£o da query')
}

