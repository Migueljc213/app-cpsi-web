import { NextRequest, NextResponse } from "next/server";
import { accessPool, executeWithRetry } from "@/lib/mysql";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";

// GET - Listar todos os grupos
export async function GET() {
  try {
    console.log('üîç [GRUPOS GET] Iniciando busca de grupos');
    
    // Verificar se a tabela existe, se n√£o, criar
    try {
      await accessPool.execute('DESCRIBE grupos');
    } catch (tableError) {
      console.log('üìã [GRUPOS GET] Tabela grupos n√£o existe, criando...');
      
      await executeWithRetry(accessPool, `
        CREATE TABLE IF NOT EXISTS grupos (
          id INT AUTO_INCREMENT PRIMARY KEY,
          nome VARCHAR(100) NOT NULL,
          descricao TEXT,
          status ENUM('Ativo', 'Inativo') DEFAULT 'Ativo',
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        )
      `);
      
      // Inserir grupos padr√£o (apenas os corretos)
      await executeWithRetry(accessPool, `
        INSERT IGNORE INTO grupos (nome, descricao) VALUES 
        ('ADMIN', 'Administradores do sistema'),
        ('prevSa√∫de', 'Sistema de Gest√£o da AAPVR')
      `);
      
      console.log('‚úÖ [GRUPOS GET] Tabela grupos criada com dados padr√£o');
    }

    // Limpar grupos inv√°lidos (manter apenas ADMIN e prevSa√∫de)
    try {
      const gruposInvalidos = await executeWithRetry(accessPool,
        'SELECT id, nome FROM grupos WHERE status = "Ativo" AND nome NOT IN ("ADMIN", "prevSa√∫de")'
      );
      
      if ((gruposInvalidos as Array<any>).length > 0) {
        console.log('üßπ [GRUPOS GET] Removendo grupos inv√°lidos:', (gruposInvalidos as Array<any>).map(g => g.nome));
        
        await executeWithRetry(accessPool,
          'UPDATE grupos SET status = "Inativo", updated_at = CURRENT_TIMESTAMP WHERE status = "Ativo" AND nome NOT IN ("ADMIN", "prevSa√∫de")'
        );
      }
    } catch (cleanupError) {
      console.error('‚ö†Ô∏è [GRUPOS GET] Erro ao limpar grupos inv√°lidos:', cleanupError);
    }

    // Buscar apenas os grupos corretos (ADMIN e prevSa√∫de)
    const grupos = await executeWithRetry(accessPool,
      'SELECT id, nome, descricao, status, created_at, updated_at FROM grupos WHERE status = "Ativo" AND nome IN ("ADMIN", "prevSa√∫de") ORDER BY nome'
    );

    console.log(`üìä [GRUPOS GET] Encontrados ${(grupos as Array<any>).length} grupos`);
    
    return NextResponse.json(grupos);
  } catch (error) {
    console.error('‚ùå [GRUPOS GET] Erro ao buscar grupos:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor', details: error instanceof Error ? error.message : 'Erro desconhecido' },
      { status: 500 }
    );
  }
}

// POST - Criar novo grupo
export async function POST(request: NextRequest) {
  try {
    console.log('üìù [GRUPOS POST] Iniciando cria√ß√£o de grupo');
    
    // Verificar autentica√ß√£o
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'Usu√°rio n√£o autenticado' },
        { status: 401 }
      );
    }

    const body = await request.json();
    console.log('üìã [GRUPOS POST] Dados recebidos:', body);

    // Validar dados obrigat√≥rios
    if (!body.nome || !body.nome.trim()) {
      return NextResponse.json(
        { error: 'Nome do grupo √© obrigat√≥rio' },
        { status: 400 }
      );
    }

    // Validar se √© um grupo v√°lido
    const gruposValidos = ['ADMIN', 'prevSa√∫de'];
    if (!gruposValidos.includes(body.nome.trim())) {
      return NextResponse.json(
        { error: 'Apenas grupos ADMIN e prevSa√∫de s√£o permitidos' },
        { status: 400 }
      );
    }

    // Verificar se j√° existe um grupo com o mesmo nome
    const grupoExistente = await executeWithRetry(accessPool,
      'SELECT id FROM grupos WHERE nome = ? AND status = "Ativo"',
      [body.nome.trim()]
    );

    if ((grupoExistente as Array<any>).length > 0) {
      return NextResponse.json(
        { error: 'J√° existe um grupo com este nome' },
        { status: 400 }
      );
    }

    // Criar o grupo
    const resultado = await executeWithRetry(accessPool,
      'INSERT INTO grupos (nome, descricao, status) VALUES (?, ?, ?)',
      [body.nome.trim(), body.descricao?.trim() || null, 'Ativo']
    );

    const grupoId = (resultado as any).insertId;
    console.log('‚úÖ [GRUPOS POST] Grupo criado com ID:', grupoId);

    // Buscar o grupo criado para retornar
    const novoGrupo = await executeWithRetry(accessPool,
      'SELECT id, nome, descricao, status, created_at, updated_at FROM grupos WHERE id = ?',
      [grupoId]
    );

    return NextResponse.json((novoGrupo as Array<any>)[0]);
  } catch (error) {
    console.error('‚ùå [GRUPOS POST] Erro ao criar grupo:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor', details: error instanceof Error ? error.message : 'Erro desconhecido' },
      { status: 500 }
    );
  }
}